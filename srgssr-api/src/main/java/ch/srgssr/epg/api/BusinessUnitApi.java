/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.srgssr.epg.api;

import org.springframework.format.annotation.DateTimeFormat;
import ch.srgssr.epg.api.Error;
import java.time.LocalDate;
import ch.srgssr.epg.api.Program;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-31T10:50:32.787731300+01:00[Europe/Zurich]")
@Validated
@Tag(name = "{businessUnit}")
public interface BusinessUnitApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /{businessUnit}/{broadcastType}/stations/{stationName} : EPG Data
     * Retrieve EPG data by providing: business unit name, broadcast type, station name and date
     *
     * @param businessUnit Supported business units are srf, rsi and rts (required)
     * @param broadcastType Supported broadcast types are tv and radio (required)
     * @param stationName Supported station names are: SRF Radio: srf-1, srf-2,srf-2-kultur, srf-3, srf-4, srf-musikwelle, srf-virus. SRF TV: srf-1, srf-2, srf-info. RTS TV: rts-1, rts-2. RSI Radio: rete-uno, rete-due, rete-tre. RSI TV: la-1, la-2 (required)
     * @param authorization Pass the access-key as a Bearer token in Authorization header. In the developer portal, Authorization header is attached on OAuth authentication. (optional)
     * @param date Date should be entererd in YYYY-MM-DD format. E.g.: 2020-05-01. If not specified current date will be considered. (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Too Many Requests (status code 429)
     */
    @Operation(
        operationId = "ePGData",
        summary = "EPG Data",
        tags = { "EPG Data" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Program.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too Many Requests", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "srg_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{businessUnit}/{broadcastType}/stations/{stationName}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Program>> ePGData(
        @Parameter(name = "businessUnit", description = "Supported business units are srf, rsi and rts", required = true) @PathVariable("businessUnit") List<String> businessUnit,
        @Parameter(name = "broadcastType", description = "Supported broadcast types are tv and radio", required = true) @PathVariable("broadcastType") List<String> broadcastType,
        @Parameter(name = "stationName", description = "Supported station names are: SRF Radio: srf-1, srf-2,srf-2-kultur, srf-3, srf-4, srf-musikwelle, srf-virus. SRF TV: srf-1, srf-2, srf-info. RTS TV: rts-1, rts-2. RSI Radio: rete-uno, rete-due, rete-tre. RSI TV: la-1, la-2", required = true) @PathVariable("stationName") List<String> stationName,
        @Parameter(name = "Authorization", description = "Pass the access-key as a Bearer token in Authorization header. In the developer portal, Authorization header is attached on OAuth authentication.") @RequestHeader(value = "Authorization", required = false) String authorization,
        @Parameter(name = "date", description = "Date should be entererd in YYYY-MM-DD format. E.g.: 2020-05-01. If not specified current date will be considered.") @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"longDescription\" : \"longDescription\", \"primeur\" : true, \"image\" : { \"description\" : \"description\", \"url\" : \"url\" }, \"replica\" : true, \"shortDescription\" : \"shortDescription\", \"productionYear\" : \"productionYear\", \"title\" : \"title\", \"episodeNumber\" : \"episodeNumber\", \"people\" : [ { \"name\" : \"name\" }, { \"name\" : \"name\" } ], \"dateTimes\" : { \"duration\" : \"duration\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, \"isLive\" : true, \"hasSubtitle\" : true, \"longHtmlDesciption\" : \"longHtmlDesciption\", \"adultWarning\" : true, \"geoBlocked\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
